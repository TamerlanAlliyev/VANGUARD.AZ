@model ShopVM
@section style {
    <link rel="stylesheet" href="~/cilent/assets/css/shop.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}



<main>

    <div class="head-url">
        <span><a href="">Home </a></span> /
        <span> Shop</span>
    </div>
    <section class="section">


        <ul class="sections filter">
            <form id="Form" method="post" asp-controller="Shop" asp-action="Index">
                <a class="close-filter">
                    <i class="fa-solid fa-xmark"></i>
                </a>



            <li class="filter-box @(Model.SelectedCats!=null&&Model.SelectedCats.Count()>0? "active" : "")">


                <div class="box-head">
                    <h3>Categories</h3>
                    <a class="open-close">
                        <i class="fa-solid fa-angle-down"></i>
                    </a>
                </div>


                <ul class="filter-container ">


                        @foreach (var cat in Model.ReadyCategory!)
                        {

                            if (cat.Category.ParentCategory == null && cat.Category.ChildCategories != null)
                            {

                            <li class="sub-category full ">
                                    @* @(Model.SelectedCats != null && Model.SelectedCats.Count() > 0 ? "active" : "")"> *@

                                <div class="parent-cat">

                                    <div class="checkbox-wrapper-33">
                                        <label class="checkbox">
                                            <input data-id="@cat.Category.Id" data-select="@cat.IsSelected" class="checkbox__trigger visuallyhidden cat-select" type="checkbox" @(Model.SelectedCats != null && Model.SelectedCats.Any(c => c.catId == cat.Category.Id) ? "checked" : "") />

                                            <span class="checkbox__symbol">
                                                <svg aria-hidden="true" class="icon-checkbox" width="28px" height="28px"
                                                     viewBox="0 0 28 28" version="1" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M4 14l8 7L24 7"></path>
                                                </svg>
                                            </span>
                                            <p class="checkbox__textwrapper">@cat.Category.Name</p>
                                        </label>

                                    </div>


                                    <a class="open-close">
                                        <i class="fa-solid fa-angle-down"></i>
                                    </a>
                                </div>


                                <ul class="child-cat ">
                                        @foreach (var childCat in Model.ReadyCategory)
                                        {
                                            if (childCat.Category.ParentCategory == cat.Category)
                                            {

                                            <li>
                                                <div class="checkbox-wrapper-33">
                                                    <label class="checkbox">
                                                        <input data-id="@childCat.Category.Id" data-select="@childCat.IsSelected" class="checkbox__trigger visuallyhidden cat-select" type="checkbox" @(Model.SelectedCats != null && Model.SelectedCats.Any(c => c.catId == childCat.Category.Id) ? "checked" : "") />
                                                        <span class="checkbox__symbol">
                                                            <svg aria-hidden="true" class="icon-checkbox" width="28px" height="28px"
                                                                 viewBox="0 0 28 28" version="1" xmlns="http://www.w3.org/2000/svg">
                                                                <path d="M4 14l8 7L24 7"></path>
                                                            </svg>
                                                        </span>
                                                        <p class="checkbox__textwrapper"> @childCat.Category.Name </p>
                                                    </label>

                                                </div>
                                            </li>
                                            }

                                        }

                                </ul>


                            </li>
                            }
                            else if (cat.Category.ParentCategory == null && cat.Category.ChildCategories == null)
                            {

                            <!-- Don't Parent -->
                            <li class="sub-category">

                                <div class="parent-cat">

                                    <div class="checkbox-wrapper-33">
                                        <label class="checkbox">
                                            <input data-id="@cat.Category.Id" data-select="@cat.IsSelected" class="checkbox__trigger visuallyhidden cat-select" type="checkbox" @(Model.SelectedCats != null && Model.SelectedCats.Any(c => c.catId == cat.Category.Id) ? "checked" : "") />
                                            <span class="checkbox__symbol">
                                                <svg aria-hidden="true" class="icon-checkbox" width="28px" height="28px"
                                                     viewBox="0 0 28 28" version="1" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M4 14l8 7L24 7"></path>
                                                </svg>
                                            </span>
                                            <p class="checkbox__textwrapper">@cat.Category.Name</p>
                                        </label>

                                    </div>

                                </div>



                            </li>
                            <!-- Don't Parent -->
                            }

                        }

                </ul>

            </li>





            <li class="filter-box colors @(Model.SelectedColors!=null&&Model.SelectedColors.Count()>0? "active" : "")">

                <div class="box-head">
                    <h3>Colors</h3>
                    <a class="open-close">
                        <i class="fa-solid fa-angle-down"></i>
                    </a>
                </div>


                <ul class="filter-container">

                        @foreach (var color in Model.ReadyColors)
                        {
                        <li class="color-box @(Model.SelectedColors != null && Model.SelectedColors.Any(c => c.colorId == color.Color.Id) ? "active" : "")">

                            <label>
                                <div class="color " style=" @(Model.SelectedColors != null && Model.SelectedColors.Any(c => c.colorId == color.Color.Id) ? "border: 2px solid rgb(217, 0, 0);" : "") ">
                                    <p style="background-color: @color.Color.HexCode;"></p>
                                </div>

                                <div class="color-name ">
                                        @color.Color.Name

                                </div>

                                <input type="checkbox" class="color-box-id" data-id="@color.Color.Id" hidden @(Model.SelectedColors != null && Model.SelectedColors.Any(c => c.colorId == color.Color.Id) ? "checked" : "") />
                            </label>

                        </li>
                        }


                </ul>

            </li>





            <li class="filter-box sizes @(Model.SelectedSizes!=null&&Model.SelectedSizes.Count()>0? "active" : "")">

                <div class="box-head">
                    <h3>Sizes</h3>
                    <a class="open-close">
                        <i class="fa-solid fa-angle-down"></i>
                    </a>
                </div>


                <ul class="filter-container size ">


                        @if (Model.ReadySizes != null)
                        {

                            @foreach (var size in Model.ReadySizes)
                            {
                            <li class="size-box @(Model.SelectedSizes != null && Model.SelectedSizes.Any(c => c.sizeId == size.Size.Id) ? "active" : "")">
                                <label>
                                    <span>@size.Size.Name</span>
                                    <input class="size-check" type="checkbox" data-id="@size.Size.Id" id="@size.Size.Name" hidden @(Model.SelectedSizes != null && Model.SelectedSizes.Any(c => c.sizeId == size.Size.Id) ? "checked" : "")>
                                </label>
                            </li>
                            }
                        }

                </ul>

            </li>






            <li class="filter-box genders">

                <div class="box-head">
                    <h3>Gender</h3>
                    <a class="open-close">
                        <i class="fa-solid fa-angle-down"></i>
                    </a>
                </div>


                <ul class="filter-container gender">


                        @if (Model.ReadyGender != null)
                        {
                            foreach (var gen in Model.ReadyGender)
                            {

                            <li class="checkbox-wrapper-33">
                                <label class="checkbox">
                                    <input class="checkbox__trigger visuallyhidden select-gender" type="checkbox" data-id="@gen.Gender.Id" @(Model.SelectedGenders != null && Model.SelectedGenders.Any(c => c.genId == gen.Gender.Id) ? "checked" : "")>
                                    <span class="checkbox__symbol">
                                        <svg aria-hidden="true" class="icon-checkbox" width="28px" height="28px"
                                             viewBox="0 0 28 28" version="1" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M4 14l8 7L24 7"></path>
                                        </svg>
                                    </span>
                                    <p class="checkbox__textwrapper">@gen.Gender.Name</p>
                                </label>

                            </li>
                            }
                        }



                </ul>

            </li>










            <li class="filter-box tags">

                <div class="box-head">
                    <h3>Tags</h3>
                    <a class="open-close">
                        <i class="fa-solid fa-angle-down"></i>
                    </a>
                </div>


                <ul class="filter-container tag">

                    <div class="searchs-container">
                        <input id="searchInput" type="text" placeholder="Search...">


                        <ul id="searchResults">

                            <!-- <span>Search not found ...</span> -->
                                @* @await Component.InvokeAsync("SearchsTagViewComponent") *@

                                @await Html.PartialAsync("_TagsSearchPartialView")

                        </ul>

                        <div class="selected-tags">
                            <ul class="selected-tags-list">

                                    @if (Model.SelectedTags != null)
                                    {
                                        foreach (var tag in Model.SelectedTags)
                                        {

                                        <li class="select-tag" data-id="@tag.Id">
                                            <p>@tag.Name</p>

                                            <i class="fa-solid fa-xmark"></i>
                                        </li>
                                        }

                                    }

                            </ul>

                        </div>


                    </div>

                </ul>

            </li>





            <li class="filter-box prices @(Model.CurrrentMaxPrice!=null||Model.CurrrentMinPrice!=null?"active":"")">

                <div class="box-head">
                    <h3>Prices</h3>
                    <a class="open-close">
                        <i class="fa-solid fa-angle-down"></i>
                    </a>
                </div>


                <div class="filter-container price">


                    <div class="custom-wrapper">

                        <div class="price-input-container">

                            <div class="price-input">

                                <div class="price-field">
                                    <span>Min</span>

                                    <div class="inp-box">
                                        <p>$</p>
                                        <input type="number" class="min-input" min="0" max="@Model.MaxPrice" value="@(Model.CurrrentMinPrice!=null?Model.CurrrentMinPrice:0)">
                                    </div>
                                </div>

                                <div class="price-field">
                                    <span>Max</span>
                                    <div class="inp-box">
                                        <p>$</p>
                                        <input type="number" class="max-input" min="0" max="@Model.MaxPrice" value="@(Model.CurrrentMaxPrice!=null?Model.CurrrentMaxPrice:Model.MaxPrice)">
                                    </div>
                                </div>

                            </div>

                            <div class="slider-container">
                                <div class="price-slider">
                                </div>
                            </div>
                        </div>




                        <!-- Slider -->
                        <div class="range-input">
                            <input type="range" class="min-range" min="0" max="@Model.MaxPrice" value="@(Model.CurrrentMinPrice!=null?Model.CurrrentMinPrice:0)" step="1">
                            <input type="range" class="max-range" min="0" max="@Model.MaxPrice" value="@(Model.CurrrentMaxPrice!=null?Model.CurrrentMaxPrice:Model.MaxPrice)" step="1">
                        </div>
                    </div>
                </div>

            </li>


            <div class="buttons-filter">

                <button class="submit" type="submit">Filter</button>
                <button class="reset" type="reset">Clear</button>
            </div>
            </form>
        </ul>



        <div class="sections product-container">


            <div class="news" style="background-image: url('/cilent/assets/settings/banner/@Model.Banner?.Image.Url');">
                <h2>
                  @Model.Banner?.Title
                </h2>

                <p>
                    @Model.Banner?.Description
                </p>
            </div>








            <div class="product-items">



                <div class="items-head">

                    <div class="left-box">

                        <p onclick="toggleFilter()">
                            <i class="bi bi-filter-left"></i>
                            Filter
                        </p>

                        <svg data-name="grid" class="@(Model.Grid?"active":"") grid" width="40" height="40" viewBox="0 0 40 40" fill="none"
                             xmlns="http://www.w3.org/2000/svg">
                            <rect width="10" height="10" fill="black" />
                            <rect x="15" width="10" height="10" fill="black" />
                            <rect x="30" width="10" height="10" fill="black" />
                            <rect y="15" width="10" height="10" fill="black" />
                            <rect x="15" y="15" width="10" height="10" fill="black" />
                            <rect x="30" y="15" width="10" height="10" fill="black" />
                            <rect y="30" width="10" height="10" fill="black" />
                            <rect x="15" y="30" width="10" height="10" fill="black" />
                            <rect x="30" y="30" width="10" height="10" fill="black" />
                        </svg>

                        <svg data-name="detail" class="@(Model.Grid?"":"active") " width="45" height="40" viewBox="0 0 45 40" fill="none"
                             xmlns="http://www.w3.org/2000/svg">
                            <rect width="10" height="10" fill="black" />
                            <rect x="15" width="30" height="10" fill="black" />
                            <rect x="15" y="15" width="30" height="10" fill="black" />
                            <rect x="15" y="30" width="30" height="10" fill="black" />
                            <rect y="15" width="10" height="10" fill="black" />
                            <rect y="30" width="10" height="10" fill="black" />
                        </svg>

                        <div>
                            <span class="item-counts">Showing</span>
                            <span class="page-item">@(Model.PageInfo.CurrentPage)-@(Model.PageInfo.TotalItems < 9 ? Model.PageInfo.TotalItems : Model.PageInfo.ItemsPerPage)</span>
                            <span>of</span>
                            <span class="items-con">@Model.PageInfo.TotalItems</span>
                            <span>results</span>
                        </div>
                    </div>



                    <div class="right-box">
                        <div class="select" tabindex="1">
                            <input data-id="1" value="Featured" class="selectopt" name="test" type="radio" id="opt1" checked>
                            <label for="opt1" class="option">Featured</label>

                            <input data-id="2" value="Best Sellers" class="selectopt" name="test" type="radio" id="opt2">
                            <label for="opt2" class="option">Best Sellers</label>

                            <input data-id="3" value="Newest Arrivals" class="selectopt" name="test" type="radio" id="opt3">
                            <label for="opt3" class="option">Newest Arrivals</label>

                            <input data-id="4" value="Discount Percentage" class="selectopt" name="test" type="radio" id="opt4">
                            <label for="opt4" class="option">Discount Percentage</label>

                            <input data-id="5" value="Highest Price" class="selectopt" name="test" type="radio" id="opt5">
                            <label for="opt5" class="option">Highest Price</label>

                            <input data-id="6" value="Lowest Price" class="selectopt" name="test" type="radio" id="opt6">
                            <label for="opt6" class="option">Lowest Price</label>
                        </div>

                    </div>

                </div>


                <!-- Active -->
                @if (Model.Product.Count() > 0 && Model.Product != null)
                {
                    @await Html.PartialAsync("_ProductPartialView", Model)

                }
                else
                {
                    <div class="not-found active">
                        <p>No products found...</p>
                    </div>
                }



            </div>



        </div>


    </section>

</main>












@section script {
    <script src="~/cilent/assets/js/shop.js"></script>

    <script>

        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('Form');
            const catSelectCheckboxes = document.querySelectorAll('.cat-select');
            const colorSelectCheckboxes = document.querySelectorAll('.color-box-id');
            const sizeSelectCheckboxes = document.querySelectorAll('.size-check');
            const genderSelectCheckboxes = document.querySelectorAll('.select-gender');


            const minPrice = document.querySelector('.min-input');
            const maxPrice = document.querySelector('.max-input');
            const prevPageLink = document.getElementById('prevPage');
            const nextPageLink = document.getElementById('nextPage');
            const numBtns = document.querySelectorAll('.num-btn');

            form.addEventListener('reset', async (event) => {
                let formData = new FormData(form);
                const queryString = new URLSearchParams(formData).toString();
                window.location.href = `/Shop/Index?${queryString}`;
            })

            form.addEventListener('submit', async (event) => {
                event.preventDefault();

                let formData = new FormData(form);

                //Category
                const selectedCats = Array.from(catSelectCheckboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => parseInt(checkbox.getAttribute('data-id')));

                selectedCats.forEach(catId => {
                    formData.append('SentCategories', catId.toString());
                });

                //Gender
                const selectedGens = Array.from(genderSelectCheckboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => parseInt(checkbox.getAttribute('data-id')));

                selectedGens.forEach(genId => {
                    formData.append('SentGenders', genId.toString());
                });


                //Color
                const selectedColor = Array.from(colorSelectCheckboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => parseInt(checkbox.getAttribute('data-id')));

                selectedColor.forEach(colorId => {
                    formData.append('SentColors', colorId.toString());
                });

                //Size
                const selectedSize = Array.from(sizeSelectCheckboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => parseInt(checkbox.getAttribute('data-id')));

                selectedSize.forEach(colorId => {
                    formData.append('SentSizes', colorId.toString());
                });


                //Price
                formData.append('MinPrice', minPrice.value);
                formData.append('MaxPrice', maxPrice.value);


                //Tags
                const tagSelectCheckboxes = document.querySelectorAll('.select-tag');

                let selectedTags = [];
                tagSelectCheckboxes.forEach(tag => {
                    selectedTags.push(tag.getAttribute('data-id'));
                });

                selectedTags.forEach(tagId => {
                    formData.append('SentTag', tagId.toString());
                });



                //Order
                const radios = document.querySelectorAll('.selectopt');
                const checkedRadio = Array.from(radios).find(radio => radio.checked);
                const orderId = checkedRadio.getAttribute('data-id');
                formData.append('OrderBy', orderId);



                //Grid
                formData.append('Grid', document.querySelector('.grid').classList.contains('active'));


                const queryString = new URLSearchParams(formData).toString();
                window.location.href = `/Shop/Index?${queryString}`;

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        console.log('The form has been sent successfully!');
                    } else {
                        console.error('An error occurred while submitting the form:', response.statusText);
                    }
                } catch (error) {
                    console.error('An error occurred while submitting the form:', error);
                }
            });

            if (prevPageLink && nextPageLink && numBtns.length > 1) {
                prevPageLink.addEventListener('click', prevPage);
                nextPageLink.addEventListener('click', nextPage);

                numBtns.forEach(btn => {
                    btn.addEventListener('click', () => {
                        goToPage(parseInt(btn.dataset.num));
                    });
                });
            } else {
                console.error('Required elements for pagination were not found.');
            }
        });






        let radios = document.querySelectorAll('.selectopt');


        radios.forEach(rad => {
            rad.addEventListener('click', () => {
                const form = document.getElementById('Form');
                const formData = new FormData(form)

                const checkedRadio = Array.from(radios).find(radio => radio.checked);
                const orderId = checkedRadio.getAttribute('data-id');


                formData.append('OrderBy', orderId);

                const queryString = new URLSearchParams(formData).toString();
                window.location.href = `/Shop/Index?${queryString}`;
            })
        })










        function sendFilterRequest(page) {
            const form = document.getElementById('Form');
            const formData = new FormData(form);

            // Categories
            const catSelectCheckboxes = document.querySelectorAll('.cat-select');
            const selectedCats = Array.from(catSelectCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => parseInt(checkbox.getAttribute('data-id')));

            selectedCats.forEach(catId => {
                formData.append('SentCategories', catId.toString());
            });

            //Genders
            const genderSelectCheckboxes = document.querySelectorAll('.select-gender');
            const selectedGens = Array.from(genderSelectCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => parseInt(checkbox.getAttribute('data-id')));

            selectedGens.forEach(genId => {
                formData.append('SentGenders', genId.toString());
            });

            // Color
            const colorSelectCheckboxes = document.querySelectorAll('.color-box-id');

            const selectedColor = Array.from(colorSelectCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => parseInt(checkbox.getAttribute('data-id')));

            selectedColor.forEach(colorId => {
                formData.append('SentColors', colorId.toString());
            });


            //Size
            const sizeSelectCheckboxes = document.querySelectorAll('.size-check');

            const selectedSize = Array.from(sizeSelectCheckboxes)
                .filter(checkbox => checkbox.checked)
                .map(checkbox => parseInt(checkbox.getAttribute('data-id')));

            selectedSize.forEach(colorId => {
                formData.append('SentSizes', colorId.toString());
            });

            //Tags
            const tagSelectCheckboxes = document.querySelectorAll('.select-tag');

            let selectedTags = [];
            tagSelectCheckboxes.forEach(tag => {
                selectedTags.push(tag.getAttribute('data-id'));
            });

            selectedTags.forEach(tagId => {
                formData.append('SentTag', tagId.toString());
            });

            //Order
            const radios = document.querySelectorAll('.selectopt');
            const checkedRadio = Array.from(radios).find(radio => radio.checked);
            const orderId = checkedRadio.getAttribute('data-id');
            formData.append('OrderBy', orderId);


            //Price
            const minPrice = document.querySelector('.min-input');
            const maxPrice = document.querySelector('.max-input');

            formData.append('MinPrice', minPrice.value);
            formData.append('MaxPrice', maxPrice.value);



            formData.append('PageInfo.CurrentPage', page);
            formData.append('PageInfo.ItemsPerPage', 9);
            formData.append('Grid', document.querySelector('.grid').classList.contains('active'));

            const queryString = new URLSearchParams(formData).toString();
            window.location.href = `/Shop/Index?${queryString}`;
        }

        function prevPage(event) {
            event.preventDefault();
            const currentPage = parseInt(document.querySelector('.num-btn.active').dataset.num);
            if (currentPage > 1) {
                sendFilterRequest(currentPage - 1);
            }
        }

        function nextPage(event) {
            event.preventDefault();
            const currentPage = parseInt(document.querySelector('.num-btn.active').dataset.num);
            const totalPages = parseInt(document.querySelectorAll('.num-btn').length);
            if (currentPage < totalPages) {
                sendFilterRequest(currentPage + 1);
            }
        }

        function goToPage(pageNum) {
            sendFilterRequest(pageNum);
        }

        document.addEventListener("DOMContentLoaded", function () {
            var searchInput = document.getElementById("searchInput");
            searchInput.addEventListener("input", function () {
                let text = searchInput.value.toString().trim();
                fetch(`/Shop/TagsSearch?text=${text}`)
                    .then(res => res.text())
                    .then(res => {
                        let search = document.getElementById('searchResults');
                        search.innerHTML = res;
                    })
                    .catch(e => console.error(e));
            });
        });


    </script>

    <script>

    </script>

}





